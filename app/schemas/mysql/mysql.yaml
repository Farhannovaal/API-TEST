openapi: 3.0.3
info:
  title: API-TEST PPA SS6
  version: "1.0.0"
  description: >
    Express API with MySQL (users, profile, health).  
    This spec also embeds MySQL DDL via vendor extension `x-ddl`.

servers:
  - url: http://localhost:3000/api

tags:
  - name: User
  - name: Profile
  - name: Health
  - name: Tenant
  - name: Menu
  - name: Order
  - name: Payment

paths:
  /users:
    get:
      tags: [User]
      summary: List users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
    post:
      tags: [User]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreate' }
      responses:
        "201": { description: Created }
        "409":
          description: Duplicate email
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        "422":
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationError' }

  /users/{id}:
    get:
      tags: [User]
      summary: Get user by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    put:
      tags: [User]
      summary: Update user by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdate' }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
        "409":
          description: Duplicate email
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        "422":
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationError' }
    delete:
      tags: [User]
      summary: Delete user by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200": { description: Deleted }
        "404": { description: Not found }

  /profile/{id}:
    get:
      tags: [Profile]
      summary: Get profile by user id
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200": { description: OK }
        "404": { description: User not found }
    put:
      tags: [Profile]
      summary: Update profile by user id (partial)
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProfileUpdate' }
      responses:
        "200": { description: OK }
        "404": { description: User/Profile not found }
        "422":
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationError' }

  /health:
    get:
      tags: [Health]
      summary: List health records (joined with users)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/HealthItem' }
    post:
      tags: [Health]
      summary: Create health record
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HealthCreate' }
      responses:
        "201": { description: Created }
        "404": { description: User not found }
        "409": { description: Duplicate penyakit in same day (not fit yet) }
        "422": { description: Validation error }

  /health/{id}:
    get:
      tags: [Health]
      summary: Get health record by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Health]
      summary: Update a health record (partial)
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HealthUpdate' }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
        "422": { description: Validation error }

  /health/{id}/fit:
    patch:
      tags: [Health]
      summary: Mark a health record as fit (is_fit = true)
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200": { description: OK }
        "404": { description: Not found }

  /health/user/{id}:
    get:
      tags: [Health]
      summary: List health by user
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/QueryDate'
      responses:
        "200": { description: OK }
        "404": { description: User not found }
        "422": { description: Validation error }

components:
  parameters:
    PathId:
      in: path
      name: id
      required: true
      schema: { type: integer, minimum: 1 }
      example: 1
      description: Resource numeric ID
    QueryDate:
      in: query
      name: date
      required: false
      schema:
        type: string
        pattern: '^\d{4}-\d{2}-\d{2}$'
      example: '2025-08-18'
      description: Filter by date (YYYY-MM-DD)

  schemas:
    # ---------- Users ----------
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: 'Farhan' }
        email: { type: string, example: 'farhan@example.com' }
        role: { type: string, enum: [admin, staff, guest], example: admin }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
    UserCreate:
      type: object
      required: [name, email]
      properties:
        name: { type: string, example: 'Farhan' }
        email: { type: string, example: 'farhan@example.com' }
        role: { type: string, enum: [admin, staff, guest], example: guest }
    UserUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        role: { type: string, enum: [admin, staff, guest] }

    # ---------- Profile ----------
    Profile:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        birthday: { type: string, example: '2003-01-31' }
        address: { type: string }
        gender: { type: string, enum: ['Laki-laki','Perempuan'] }
        job_status: { type: string, enum: ['working','not working'] }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
    ProfileUpdate:
      type: object
      properties:
        birthday:
          description: Accepts YYYY-MM-DD, DD/MM/YYYY, or ISO-8601; normalized to YYYY-MM-DD
          oneOf:
            - type: string
        address: { type: string, minLength: 3, maxLength: 250 }
        gender: { type: string, enum: ['Laki-laki','Perempuan'] }
        job_status: { type: string, enum: ['working','not working'] }

    # ---------- Health ----------
    HealthItem:
      type: object
      properties:
        id: { type: integer, example: 10 }
        user_id: { type: integer, example: 1 }
        penyakit: { type: string, example: 'Flu' }
        is_fit: { type: boolean, example: false }
        waktu: { type: string, format: date-time }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
        user_name: { type: string, example: 'Farhan' }
        user_email: { type: string, example: 'farhan@example.com' }
        user_role: { type: string, enum: [admin, staff, guest], example: 'admin' }
    HealthCreate:
      type: object
      required: [user_id, penyakit]
      properties:
        user_id: { type: integer, example: 1 }
        penyakit: { type: string, example: 'Flu' }
        waktu: { type: string, format: date-time, example: '2025-08-18T10:00:00+07:00' }
        is_fit: { type: boolean, example: false }
    HealthUpdate:
      type: object
      properties:
        penyakit: { type: string }
        waktu: { type: string, format: date-time }
        is_fit: { type: boolean }

    # ---------- Tenants / Menus / Orders / Payments (schemas only) ----------
    Tenant:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        code: { type: string }
        address: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
    Menu:
      type: object
      properties:
        id: { type: integer }
        tenant_id: { type: integer }
        name: { type: string }
        sku: { type: string, nullable: true }
        category: { type: string, nullable: true }
        price: { type: number, format: float }
        stock_qty: { type: integer }
        image_url: { type: string, nullable: true }
        is_active: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
    Order:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        tenant_id: { type: integer }
        status: { type: string, enum: [pending, paid, cancelled, refunded] }
        payment_method: { type: string, enum: [cash, bank_transfer, ewallet, card] }
        total_amount: { type: number, format: float }
        notes: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
    OrderItem:
      type: object
      properties:
        id: { type: integer }
        order_id: { type: integer }
        menu_id: { type: integer }
        qty: { type: integer }
        unit_price: { type: number, format: float }
        subtotal: { type: number, format: float }
    Payment:
      type: object
      properties:
        id: { type: integer }
        order_id: { type: integer }
        provider: { type: string, nullable: true }
        method: { type: string, enum: [cash, bank_transfer, ewallet, card] }
        status: { type: string, enum: [pending, success, failed] }
        paid_amount: { type: number, format: float }
        paid_at: { type: string, format: date-time, nullable: true }
        reference: { type: string, nullable: true }
        raw_payload: { type: object, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }

    # ---------- Errors ----------
    ApiError:
      type: object
      properties:
        error: { type: string, example: 'Message' }
    ValidationError:
      type: object
      properties:
        error: { type: string, example: 'Validation error' }
        details:
          type: array
          items:
            type: object
            properties:
              message: { type: string, example: '"email" must be a valid email' }
              path:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: integer

# ---------- Vendor extension: MySQL DDL ----------
x-ddl:
  users: |
    CREATE TABLE IF NOT EXISTS users (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      email VARCHAR(191) NOT NULL UNIQUE,
      role ENUM('admin','staff','guest') NOT NULL DEFAULT 'guest',
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  profile: |
    CREATE TABLE IF NOT EXISTS profile (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      user_id INT UNSIGNED NOT NULL UNIQUE,
      birthday DATE NULL,
      address VARCHAR(250) NULL,
      gender ENUM('Laki-laki','Perempuan') NULL,
      job_status ENUM('working','not working') NULL,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      CONSTRAINT fk_profile_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
      INDEX idx_profile_user (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  health: |
    CREATE TABLE IF NOT EXISTS health (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      user_id INT UNSIGNED NOT NULL,
      penyakit VARCHAR(100) NOT NULL,
      is_fit TINYINT(1) NOT NULL DEFAULT 0,
      waktu DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      CONSTRAINT fk_health_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
      INDEX idx_health_user_fit_waktu (user_id, is_fit, waktu)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  tenants: |
    CREATE TABLE IF NOT EXISTS tenants (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(120) NOT NULL,
      code VARCHAR(50) NOT NULL UNIQUE,
      address VARCHAR(255) NULL,
      phone VARCHAR(50) NULL,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  menus: |
    CREATE TABLE IF NOT EXISTS menus (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      tenant_id INT UNSIGNED NOT NULL,
      name VARCHAR(120) NOT NULL,
      sku VARCHAR(64) NULL,
      category VARCHAR(64) NULL,
      price DECIMAL(12,2) NOT NULL DEFAULT 0,
      stock_qty INT UNSIGNED NOT NULL DEFAULT 0,
      image_url VARCHAR(255) NULL,
      is_active TINYINT(1) NOT NULL DEFAULT 1,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      CONSTRAINT fk_menus_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,
      CONSTRAINT uq_menus_tenant_sku UNIQUE (tenant_id, sku),
      INDEX idx_menus_tenant (tenant_id),
      INDEX idx_menus_tenant_category (tenant_id, category)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  orders: |
    CREATE TABLE IF NOT EXISTS orders (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      user_id INT UNSIGNED NOT NULL,
      tenant_id INT UNSIGNED NOT NULL,
      status ENUM('pending','paid','cancelled','refunded') NOT NULL DEFAULT 'pending',
      payment_method ENUM('cash','bank_transfer','ewallet','card') NOT NULL DEFAULT 'cash',
      total_amount DECIMAL(12,2) NOT NULL DEFAULT 0,
      note VARCHAR(255) NULL,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE RESTRICT,
      CONSTRAINT fk_orders_tenant FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE RESTRICT,
      INDEX idx_orders_user (user_id),
      INDEX idx_orders_tenant (tenant_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  order_items: |
    CREATE TABLE IF NOT EXISTS order_items (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      order_id INT UNSIGNED NOT NULL,
      menu_id INT UNSIGNED NOT NULL,
      qty INT UNSIGNED NOT NULL,
      unit_price DECIMAL(12,2) NOT NULL DEFAULT 0,
      subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      CONSTRAINT fk_items_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
      CONSTRAINT fk_items_menu FOREIGN KEY (menu_id) REFERENCES menus(id) ON DELETE RESTRICT,
      INDEX idx_items_order (order_id),
      INDEX idx_items_menu (menu_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  payments: |
    CREATE TABLE IF NOT EXISTS payments (
      id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      order_id INT UNSIGNED NOT NULL,
      provider_txn_id VARCHAR(64) NULL,
      method ENUM('cash','bank_transfer','ewallet','card') NOT NULL,
      status ENUM('pending','success','failed') NOT NULL DEFAULT 'pending',
      paid_amount DECIMAL(12,2) NOT NULL DEFAULT 0,
      paid_at DATETIME NULL,
      reference VARCHAR(100) NULL,
      raw_payload JSON NULL,
      created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      CONSTRAINT fk_payments_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
      INDEX idx_payments_order (order_id),
      INDEX idx_payments_status (status)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
