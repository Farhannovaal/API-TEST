paths:
  /orders/{orderId}/payments:
    get:
      tags: [Payments]
      summary: List payments by order
      parameters:
        - in: path
          name: orderId
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "200": { description: OK }
        "404": { description: Order not found }
    post:
      tags: [Payments]
      summary: Create payment for order (pending)
      parameters:
        - in: path
          name: orderId
          required: true
          schema: { type: integer, minimum: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentCreate' }
      responses:
        "201": { description: Created }
        "404": { description: Order not found }
        "422": { description: Validation error }

  /payments/{id}:
    get:
      tags: [Payments]
      summary: Get payment by id
      parameters: [ { $ref: '#/components/parameters/PathId' } ]
      responses:
        "200": { description: OK }
        "404": { description: Not found }

  /payments/{id}/capture:
    patch:
      tags: [Payments]
      summary: Mark payment as success
      parameters: [ { $ref: '#/components/parameters/PathId' } ]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentCapture' }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
        "409": { description: Conflict }

  /payments/{id}/fail:
    patch:
      tags: [Payments]
      summary: Mark payment as failed
      parameters: [ { $ref: '#/components/parameters/PathId' } ]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentFail' }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
        "409": { description: Conflict }
